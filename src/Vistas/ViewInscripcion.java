/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;
import Modelo.*;
import Control.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gabriel
 */
public class ViewInscripcion extends javax.swing.JInternalFrame {

    private InscripcionData inscripcionData = new InscripcionData();
    private AlumnoData alumnoData = new AlumnoData();
    private DefaultTableModel modelo = new DefaultTableModel();
    
    /**
     * Creates new form Inscripcion
     */
    public ViewInscripcion() {
        initComponents();
        cargarAlumnos();
        armarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCBAlumnos = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jRBNoinscriptas = new javax.swing.JRadioButton();
        jRBInscriptas = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTMaterias = new javax.swing.JTable();
        jBInscribir = new javax.swing.JButton();
        jBAnular = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();

        setBackground(new java.awt.Color(45, 53, 59));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Formulario de Inscripci√≥n");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Seleccione un alumno:");

        jCBAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAlumnosActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Listado de materias");

        jRBNoinscriptas.setText("Materias no inscriptas");
        jRBNoinscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBNoinscriptasActionPerformed(evt);
            }
        });

        jRBInscriptas.setText("Materias inscriptas");
        jRBInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBInscriptasActionPerformed(evt);
            }
        });

        jTMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTMaterias);

        jBInscribir.setText("Inscribir");
        jBInscribir.setEnabled(false);
        jBInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInscribirActionPerformed(evt);
            }
        });

        jBAnular.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBAnular.setText("Anular inscripcion");
        jBAnular.setEnabled(false);
        jBAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAnularActionPerformed(evt);
            }
        });

        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(143, 143, 143))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRBInscriptas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRBNoinscriptas))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBInscribir, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBAnular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jCBAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCBAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRBNoinscriptas)
                    .addComponent(jRBInscriptas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBInscribir)
                    .addComponent(jBSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBAnular, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(95, 95, 95))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRBInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBInscriptasActionPerformed
        
        borrarFila();
        jRBNoinscriptas.setSelected(false);
        jBAnular.setEnabled(true);
        jBInscribir.setEnabled(false);
        llenarTabla();
    }//GEN-LAST:event_jRBInscriptasActionPerformed

    private void jRBNoinscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBNoinscriptasActionPerformed
        
        borrarFila();
        jRBInscriptas.setSelected(false);
        jBAnular.setEnabled(false);
        jBInscribir.setEnabled(true);
        llenarTabla();
    }//GEN-LAST:event_jRBNoinscriptasActionPerformed

    private void jCBAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAlumnosActionPerformed
        
        borrarFila();
        jRBInscriptas.setSelected(false);
        jRBNoinscriptas.setSelected(false);
        jBInscribir.setEnabled(false);
        jBAnular.setEnabled(false);
        
    }//GEN-LAST:event_jCBAlumnosActionPerformed

    private void jBInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInscribirActionPerformed
        
        int filaSelec = jTMaterias.getSelectedRow();
        
        if (filaSelec != -1) {
            
            Alumno alumnoSelec = (Alumno) jCBAlumnos.getSelectedItem();
            
            int idMateria = (Integer) modelo.getValueAt(filaSelec, 0);
            String nombre = (String) modelo.getValueAt(filaSelec, 1);
            int anio = (Integer) modelo.getValueAt(filaSelec, 2);
            
            Materia materia = new Materia(idMateria,nombre,anio,1);
            
            Inscripcion inscripcion = new Inscripcion(0,alumnoSelec,materia);
            inscripcionData.inscribirAlumno(inscripcion);
            llenarTabla();
            
        }
        else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una materia.");
        }
        
    }//GEN-LAST:event_jBInscribirActionPerformed

    private void jBAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAnularActionPerformed
        
        int filaSelec = jTMaterias.getSelectedRow();
        
        if (filaSelec != -1) {
            
            Alumno alumnoSelec = (Alumno) jCBAlumnos.getSelectedItem();
            
            int idMateria = (Integer) modelo.getValueAt(filaSelec, 0);
            
            inscripcionData.eliminar(alumnoSelec.getId_Alumno(),idMateria);
            llenarTabla();
        }
        else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una materia.");
        }
        
    }//GEN-LAST:event_jBAnularActionPerformed

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAnular;
    private javax.swing.JButton jBInscribir;
    private javax.swing.JButton jBSalir;
    private javax.swing.JComboBox<Alumno> jCBAlumnos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRBInscriptas;
    private javax.swing.JRadioButton jRBNoinscriptas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTMaterias;
    // End of variables declaration//GEN-END:variables

    private void cargarAlumnos() {
        ArrayList<Alumno> alumnos = alumnoData.buscarAlumnos(1);
        
        for (Alumno alum : alumnos) {
            jCBAlumnos.addItem(alum);
        }
    }

    private void armarCabecera() {
        
        ArrayList<Object> titulos = new ArrayList();
        
        titulos.add("ID");
        titulos.add("Nombre");
        titulos.add("A√±o");
        
        for (Object tit : titulos) {
            modelo.addColumn(tit);
        }
        jTMaterias.setModel(modelo);
    }
    
    private void llenarTabla() {
        
        borrarFila();
        Alumno alumnoSelec = (Alumno) jCBAlumnos.getSelectedItem();
        
        if (jRBNoinscriptas.isSelected()) {
            ArrayList<Materia> lista = inscripcionData.materiasNoCursadas(alumnoSelec.getId_Alumno());
            
            for (Materia mat : lista) {
                modelo.addRow(new Object []{mat.getId_Materia(),mat.getNombre(),mat.getAnio()});
            }
        }
        if (jRBInscriptas.isSelected()) {
            ArrayList<Materia> lista = inscripcionData.materiasCursadas(alumnoSelec.getId_Alumno());
            
            for (Materia mat : lista) {
                modelo.addRow(new Object []{mat.getId_Materia(),mat.getNombre(),mat.getAnio()});
            }
        }
    }
    
    private void borrarFila() {
        
        int filas = modelo.getRowCount() - 1;
        
        for (int i=filas; i>=0; i--) {
            
            modelo.removeRow(i);
            
        }
    }
    
}
